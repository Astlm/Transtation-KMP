# .github/workflows/android_build.yml

name: Build Android App # 工作流名称

on: # 触发工作流的事件
  workflow_dispatch: # 允许手动触发工作流

jobs: # 工作流包含的任务
  build_android: # 任务 ID (可自定义)
    name: Build Android APK # 任务名称 (显示在 GitHub UI)
    runs-on: ubuntu-latest # 指定运行任务的虚拟机环境

    steps: # 任务执行的步骤
      - name: Checkout code # 步骤 1: 检出代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: Set up JDK 17 # 步骤 2: 设置 Java 环境
        uses: actions/setup-java@v4 # 使用官方的 setup-java action
        with:
          java-version: '17' # **假设**: 指定 JDK 版本为 17 (请根据项目实际情况核实和修改)
          distribution: 'temurin' # 使用 Eclipse Temurin 发行版
          cache: 'gradle' # 缓存 Gradle 依赖项，加速后续构建

      - name: Grant execute permission for gradlew # 步骤 3: 赋予 Gradle Wrapper 执行权限
        run: chmod +x gradlew # **假设**: Gradle Wrapper 在根目录

      - name: Build with Gradle # 步骤 4: 执行 Gradle 构建
        run: ./gradlew :composeApp:assembleDebug # **假设**: 模块名为 'composeApp', 构建任务为 'assembleDebug' (请根据项目实际情况核实和修改)
        # 注意: 这个命令可能只生成 debug APK。如果需要其他类型的 APK，请调整此命令。

      # --- 新增步骤 ---
      - name: Find and List all APKs # 步骤 5 (新): 查找并列出所有构建生成的 .apk 文件
        id: find_apks # 给步骤一个 ID，虽然在这个版本里不直接用输出，但保持是个好习惯
        run: |
          echo "Searching for all generated .apk files..."
          # 从当前目录 (.) 开始递归查找所有以 .apk 结尾的文件 (-type f 确保是文件)
          apk_files=$(find . -name "*.apk" -type f) 
          
          if [[ -z "$apk_files" ]]; then
            # 如果没有找到任何 APK 文件
            echo "Warning: No APK files found after build." 
            # 你也可以选择在这里让工作流失败: echo "::error::No APK files found!"; exit 1
          else
            # 如果找到了 APK 文件，打印它们的路径
            echo "Found the following APK files:"
            echo "$apk_files" # 打印找到的文件列表，每个文件路径占一行
          fi

      # --- 修改步骤 ---
      - name: Upload ALL APK artifacts # 步骤 6 (修改): 上传所有找到的 .apk 文件
        uses: actions/upload-artifact@v4 # 使用官方的 upload-artifact action
        with:
          name: all-apks-${{ github.run_id }} # 修改产物名称，可以加上 run_id 避免重名
          # 使用通配符 **/*.apk 来匹配当前目录 (.) 及其所有子目录下的 .apk 文件
          # 这会自动包含所有由 find 命令找到的 .apk 文件
          # upload-artifact 会保留它们在 runner 文件系统中的目录结构
          path: '**/*.apk' 
          if-no-files-found: error # 如果构建成功但没找到任何 apk 文件则报错 (与上面 find 步骤的行为匹配)
          # 你也可以改为 'warn' 或 'ignore'
          retention-days: 7 # 可选：设置产物保留天数
